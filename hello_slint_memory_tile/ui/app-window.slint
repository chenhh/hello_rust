// 從標準元件庫引用內建元件
// https://github.com/slint-ui/slint/blob/master/internal/compiler/widgets/qt/std-widgets.slint
// https://docs.slint.dev/1.8.0/docs/slint/src/language/syntax/modules
import { Button, VerticalBox } from "std-widgets.slint";

// 所有視覺元素都顯示在一個視窗(window)中。x 和 y 屬性儲存元素相對於其父元素的座標(左上方為(0,0)。
// 透過將父元素的位置添加到元素的位置來確定元素的絕對位置。如果父元素本身有一個父元素，那麼也會添加該父元素。此計算將一直持續，直到到達頂級元素。


// 預設情況下，在 .slint 檔中宣告的每個型別都是私有的。export 關鍵字可讓其它slint存取此元件
// https://docs.slint.dev/1.8.0/docs/slint/src/language/syntax/modules#modules

// 資料模型：在程式為做為模型的陣列，其中每個元素都描述圖塊資料結構
// struct沒有export，只能在內部使用
// 預設情況下，在 .slint 檔中宣告的每個型別都是私有的。export 關鍵字會更改此設定。
struct TileData {
    image: image,   // 對影象的引用可以使用 @image-url（“...”） 結構進行初始化
    image_visible: bool,    // 圖片是否可見
    solved: bool,   // 是否已解答
}

/*
struct元素定義的語法和rust類似，名稱: 類別
而 slint支援的類別比rust寬鬆如下：
https://docs.slint.dev/1.8.0/docs/slint/src/language/syntax/types
*/

// 放置圖片的小格，底層為圖片，上層為窗簾
// 當滑鼠操上面按一下時，會打開窗簾顯示圖片
component MemoryTile inherits Rectangle {
    callback clicked;

    // property為自定義的組件屬性

    // 判斷窗簾是開還是關
    in property <bool> open_curtain;

    // 對於最後的潤色，添加一個 solved 屬性，
    // 用於在玩家找到一對顏色時將顏色動畫化為綠色陰影。
    in property <bool> solved;

    // icon用於記錄影相路徑
    in property <image> icon;

    // 元素具有屬性，您可以為其分配值。
    // 以分配整個表達式。當表達式所依賴的任何屬性發生變化時，Slint 會重新計算表示式，這使得使用者介面是反應性的。
    // 長、寬、背景色與動畫設定
    // 為任何幾何屬性指定顯式值時，Slint 要求您為數位附加一個單位。您可以在兩種不同的單位之間進行選擇：px或phx
    // 您還可以將 width 和 height 屬性指定為 % 百分比單位(相對於父元件)
    height: 64px;
    width: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    // 底層的影像，宣告越前面的組件預設在越下面
    Image {
        // 此處source不寫固定路徑，是因為會隨機配置圖片
        source: icon; // icon為自定義屬性
        width: parent.width;
        height: parent.height;
    }

    // 左窗簾，蓋在Image上
    Rectangle {
        background: #193076;
        x: 0px;
        // 此處parent指MemoryTile, 只蓋住左半部
        // open_curtain為自定義屬性
        // 寬度為零將使矩形不可見，通過將寬度設置為父項寬度的一半來填充左半部分
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        animate width {
            duration: 100ms;
            easing: ease-in;
        }
    }

    // 右窗簾，蓋在Image上
    Rectangle {
        background: #193076;
        // 此處parent指MemoryTile, 只蓋住右半部
        // open_curtain為自定義屬性
        x: open_curtain ? parent.width : (parent.width / 2);
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        /* https://docs.slint.dev/1.8.0/docs/slint/src/language/syntax/animations
          使用 animate 關鍵字為屬性宣告動畫
          delay：開始動畫之前等待的時間
          duration：動畫完成所需的時間
          iteration-count：動畫應執行的次數。
          easing：可以是以下任何值。
             linear, ease系列
             ...
        */
        animate width {
            duration: 100ms;
            easing: ease-in;
        }
        animate x {
            duration: 250ms;
            easing: ease-in;
        }
    }
    // 最上層，抓取滑鼠按鍵的資訊
    // TouchArea 元素聲明一個透明的矩形區域，
    // 該區域允許對使用者輸入（如滑鼠按兩下或點擊）做出反應。
    // 該元素將回調轉發到 MainWindow，指示使用者按兩下了該磁貼。
    TouchArea {
        clicked => {
            // Delegate to the user of this element
            // root 引用元件中最外層的元素，此處為 Window(?)
            // parent為目前元件的父元件，self指元件本身
            root.clicked();
        }
    }
}

// https://docs.slint.dev/1.8.0/docs/slint/src/language/builtins/elements#window
// window是內建的元件(基本的視窗)，是螢幕上可見的元素樹的根。
// 但可在slintpad中看到可設定的屬性
// export的元件才可在rust可見 (slint::include_modules!())
export component MainWindow inherits Window {
    // 您可以透過兩種方式放置元素來建立整個圖形使用者介面：
    // 顯式 - 通過設置 x、y、width 和 height 屬性。
    // Automatically - 通過使用佈局元素。
    // 顯式放置非常適合元素較少的靜態場景。
    // 佈局適用於複雜的使用者介面，並有助於創建可擴展的使用者介面。佈局元素表示元素之間的幾何關係。
    width: 326px;
    height: 326px;
    icon: @image-url("icons/tile_logo.png");

    // 上面的width, height為組件內部的屬性，也可用propery設定額外的屬性
    // property 預設為private，只能從組件內部存取
    // in表示可由此元件的使用者設定和修改，例如通過繫結或通過回撥中的分配。
    // out：只能由元件設定的 output 屬性。對於元件的使用者，它是唯讀的。
    // in-out: 每個人都可以讀取和修改該屬性。
    in property <bool> disable_tiles; // Added

    // 元件可以宣告回撥，將狀態的變化傳達給外部。回撥是通過 「呼叫」 它們來呼叫的，就像你呼叫函式一樣。
    callback check_if_pair_solved(); // Added

    // 此處只宣告8個圖片，剩下配對的8個圖片由rust生成
    // 陣列是通過在陣列元素的型別周圍用方括弧[ArrayType]括起來來宣告的。
    // 對陣列的越界存取將返回預設構造的值。
    in property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];
    // for syntax
    // for name[index] in model : id := Element { ... }
    for tile[i] in memory_tiles: MemoryTile {
        // 以表示式設定MemoryTile的屬性
        x: mod(i, 4) * 74px;
        y: floor(i / 4) * 74px;
        width: 64px;
        height: 64px;
        icon: tile.image;
        open_curtain: tile.image_visible || tile.solved;
        // propagate the solved status from the model to the tile
        solved: tile.solved;

        // 此處的=>為binding，當按下按鈕時會執行的表示式,
        // 由於disable_tiles屬性為in, 所以可用binding修改
        clicked => {
            // tile.image_visible = !tile.image_visible;
            if (!root.disable_tiles) {
                tile.image_visible = true;
                root.check_if_pair_solved();
            }
        }
    }
    // 自定義函數
    // 函式可以具有在括弧內宣告的引數，格式為 name： type。
    // 這些引數可以通過它們在函式體中的名稱進行引用。引數按 value 傳遞。
    // 函式可以用 pure 關鍵字進行註釋。這表示該函式不會引起任何副作用。
    // 回撥中的程式碼/邏輯可以在後端程式碼中設定，並使用後端語言（Rust、C++、JS）實現，
    // 而函式必須完全在 slint 中定義
    // 一般來說，使用回撥的最大原因是能夠從後端程式碼處理它們。如果不需要，請使用 function。
     function my-function(parameter: int) -> string {
            // Function code goes here
            return "result";
        }
}

//export component MainWindow inherits Window {
//    Text {
//        text: "hello world";
//        color: green;
//    }
//}